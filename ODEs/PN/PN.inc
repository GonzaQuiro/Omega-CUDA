//omega, S1u, S2u, LN, Phi

*dx0 = 0.96e2 / 0.5e1 * x0 * x0 * m1 * m2 * pow(m1 + m2, -2) * pow((m1 + m2) * x0, 0.5e1 / 0.3e1) * (1 - (0.743e3 / 0.336e3 + 0.11e2 / 0.4e1 * m1 * m2 * pow(m1 + m2, -2)) * pow((m1 + m2) * x0, 0.2e1 / 0.3e1) - (pow(m1, -2) * (x1 * x7 + x2 * x8 + x3 * x9) * (113 * m1 * m1 * pow(m1 + m2, -2) + 75 * m1 * m2 * pow(m1 + m2, -2)) / 12 + pow(m2, -2) * (x4 * x7 + x5 * x8 + x6 * x9) * (113 * m2 * m2 * pow(m1 + m2, -2) + 75 * m1 * m2 * pow(m1 + m2, -2)) / 12 - 0.1256637062e2) * (m1 + m2) * x0 + (0.34103e5 / 0.18144e5 + 0.13661e5 / 0.2016e4 * m1 * m2 * pow(m1 + m2, -2) + 0.59e2 / 0.18e2 * m1 * m1 * m2 * m2 * pow(m1 + m2, -4)) * pow((m1 + m2) * x0, 0.4e1 / 0.3e1) - 0.1e1 / m1 / m2 * pow(m1 + m2, -2) * (247 * x1 * x4 + 247 * x2 * x5 + 247 * x3 * x6 - (721 * x1 * x7 + 721 * x2 * x8 + 721 * x3 * x9) * (x4 * x7 + x5 * x8 + x6 * x9)) * pow((m1 + m2) * x0, 0.4e1 / 0.3e1) / 48 - 0.31415926535897932e1 * (0.4159e4 / 0.672e3 + 0.189e3 / 0.8e1 * m1 * m2 * pow(m1 + m2, -2)) * pow((m1 + m2) * x0, 0.5e1 / 0.3e1) + (0.1609522690e3 + (-0.1587842186e3 - 0.2078e4 / 0.315e3 * m1 * m2 * pow(m1 + m2, -2)) * m1 * m2 * pow(m1 + m2, -2) + 0.541e3 / 0.896e3 * m1 * m1 * m2 * m2 * pow(m1 + m2, -4) - 0.5605e4 / 0.2592e4 * pow(m1, 3) * pow(m2, 3) * pow(m1 + m2, -6) - 0.856e3 / 0.105e3 * log(16 * pow((m1 + m2) * x0, 0.2e1 / 0.3e1))) * pow(m1 + m2, 2) * x0 * x0 + 0.31415926535897932e1 * (-0.4415e4 / 0.4032e4 + 0.358675e6 / 0.6048e4 * m1 * m2 * pow(m1 + m2, -2) + 0.91495e5 / 0.1512e4 * m1 * m1 * m2 * m2 * pow(m1 + m2, -4)) * pow((m1 + m2) * x0, 0.7e1 / 0.3e1));
*dx1 = -3 * (((-x7 * x9 * x4 - x9 * x9 * x6 - x8 * x9 * x5 + x6 / 3) * x2 + (x8 * x8 * x5 + (x4 * x7 + x6 * x9) * x8 - x5 / 3) * x3) * pow((m1 + m2) * x0, 0.1e1 / 0.3e1) - 0.4e1 / 0.3e1 * (m1 + 0.3e1 / 0.4e1 * m2) * m2 * (-x2 * x9 + x3 * x8)) * x0 * x0 * pow((m1 + m2) * x0, -0.1e1 / 0.3e1) / (2 * m1 + 2 * m2);
*dx2 = 3 * x0 * x0 * (((-x7 * x9 * x4 - x9 * x9 * x6 - x8 * x9 * x5 + x6 / 3) * x1 + (x7 * x7 * x4 + (x5 * x8 + x6 * x9) * x7 - x4 / 3) * x3) * pow((m1 + m2) * x0, 0.1e1 / 0.3e1) - 0.4e1 / 0.3e1 * (m1 + 0.3e1 / 0.4e1 * m2) * m2 * (-x1 * x9 + x3 * x7)) * pow((m1 + m2) * x0, -0.1e1 / 0.3e1) / (2 * m1 + 2 * m2);
*dx3 = -3 * x0 * x0 * pow((m1 + m2) * x0, -0.1e1 / 0.3e1) * (((-x7 * x8 * x4 - x8 * x9 * x6 - x8 * x8 * x5 + x5 / 3) * x1 + (x7 * x7 * x4 + (x5 * x8 + x6 * x9) * x7 - x4 / 3) * x2) * pow((m1 + m2) * x0, 0.1e1 / 0.3e1) - 0.4e1 / 0.3e1 * (-x1 * x8 + x2 * x7) * (m1 + 0.3e1 / 0.4e1 * m2) * m2) / (2 * m1 + 2 * m2);
*dx4 = -3 * (((-x7 * x9 * x1 - x8 * x9 * x2 - x9 * x9 * x3 + x3 / 3) * x5 + x6 * (x8 * x8 * x2 + (x1 * x7 + x3 * x9) * x8 - x2 / 3)) * pow((m1 + m2) * x0, 0.1e1 / 0.3e1) - (-x5 * x9 + x6 * x8) * m1 * (m1 + 0.4e1 / 0.3e1 * m2)) * x0 * x0 * pow((m1 + m2) * x0, -0.1e1 / 0.3e1) / (2 * m1 + 2 * m2);
*dx5 = 3 * (((-x7 * x9 * x1 - x8 * x9 * x2 - x9 * x9 * x3 + x3 / 3) * x4 + (x7 * x7 * x1 + (x2 * x8 + x3 * x9) * x7 - x1 / 3) * x6) * pow((m1 + m2) * x0, 0.1e1 / 0.3e1) - (-x4 * x9 + x6 * x7) * m1 * (m1 + 0.4e1 / 0.3e1 * m2)) * x0 * x0 * pow((m1 + m2) * x0, -0.1e1 / 0.3e1) / (2 * m1 + 2 * m2);
*dx6 = -3 * (((-x7 * x8 * x1 - x8 * x8 * x2 - x8 * x9 * x3 + x2 / 3) * x4 + (x7 * x7 * x1 + (x2 * x8 + x3 * x9) * x7 - x1 / 3) * x5) * pow((m1 + m2) * x0, 0.1e1 / 0.3e1) - (m1 + 0.4e1 / 0.3e1 * m2) * m1 * (-x4 * x8 + x5 * x7)) * x0 * x0 * pow((m1 + m2) * x0, -0.1e1 / 0.3e1) / (2 * m1 + 2 * m2);
*dx7 = -0.3e1 / 0.2e1 * x0 * x0 * ((-x5 * x9 + x6 * x8) * m1 * m1 - 0.4e1 / 0.3e1 * m2 * (x2 * x9 - x3 * x8 + x5 * x9 - x6 * x8) * m1 + (-x2 * x9 + x3 * x8) * m2 * m2 + ((2 * x8 * x9 * x5 + (-x8 * x8 + x9 * x9) * x6 + x7 * x9 * x4) * x2 + ((-x8 * x8 + x9 * x9) * x5 - x8 * (x4 * x7 + 2 * x6 * x9)) * x3 + x7 * x1 * (x5 * x9 - x6 * x8)) * pow((m1 + m2) * x0, 0.1e1 / 0.3e1)) / m2 / m1 / (m1 + m2);
*dx8 = -0.3e1 / 0.2e1 * ((x4 * x9 - x6 * x7) * m1 * m1 - 0.4e1 / 0.3e1 * m2 * (-x1 * x9 + x3 * x7 - x4 * x9 + x6 * x7) * m1 + (x1 * x9 - x3 * x7) * m2 * m2 + ((-2 * x7 * x9 * x4 + (x7 * x7 - x9 * x9) * x6 - x8 * x9 * x5) * x1 + ((x7 * x7 - x9 * x9) * x4 + x7 * (x5 * x8 + 2 * x6 * x9)) * x3 + x8 * x2 * (-x4 * x9 + x6 * x7)) * pow((m1 + m2) * x0, 0.1e1 / 0.3e1)) * x0 * x0 / m2 / m1 / (m1 + m2);
*dx9 = 0.3e1 / 0.2e1 * ((x4 * x8 - x5 * x7) * m1 * m1 - 0.4e1 / 0.3e1 * m2 * (-x1 * x8 + x2 * x7 - x4 * x8 + x5 * x7) * m1 + (x1 * x8 - x2 * x7) * m2 * m2 + pow((m1 + m2) * x0, 0.1e1 / 0.3e1) * ((-2 * x7 * x8 * x4 + (x7 * x7 - x8 * x8) * x5 - x6 * x8 * x9) * x1 + ((x7 * x7 - x8 * x8) * x4 + 2 * x7 * x5 * x8 + x7 * x6 * x9) * x2 + x9 * x3 * (-x4 * x8 + x5 * x7))) * x0 * x0 / m2 / m1 / (m1 + m2);
if (x7*x7+x8*x8> 0.0)
    *dx10 = 0.3e1 / 0.2e1 * x0 * ((((-x1 * x6 - x3 * x4) * x7 - x8 * (x2 * x6 + x3 * x5)) * x9 * x9 + ((-2 * x1 * x4 + 2 * x3 * x6) * x7 * x7 - 2 * x8 * (x1 * x5 + x2 * x4) * x7 - 2 * x8 * x8 * (x2 * x5 - x3 * x6)) * x9 + (x7 * (x1 * x6 + x3 * x4) + x8 * (x2 * x6 + x3 * x5)) * (x7 * x7 + x8 * x8)) * x9 * x0 * pow((m1 + m2) * x0, 0.1e1 / 0.3e1) - x9 * (((-x4 * m1 * m1 - 0.4e1 / 0.3e1 * m2 * (x1 + x4) * m1 - x1 * m2 * m2) * x7 - (x5 * m1 * m1 + 0.4e1 / 0.3e1 * m2 * (x5 + x2) * m1 + x2 * m2 * m2) * x8) * x9 + (x6 * m1 * m1 + 0.4e1 / 0.3e1 * m2 * (x6 + x3) * m1 + x3 * m2 * m2) * (x7 * x7 + x8 * x8)) * x0 + 0.2e1 / 0.3e1 * (m1 + m2) * m1 * m2 * (x7 * x7 + x8 * x8)) / (x7 * x7 + x8 * x8) / m2 / m1 / (m1 + m2);
else
    *dx10=x0;
